import streamlit as st
from detector import CoffeeDetector
import os
import torch

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="ƒê·∫øm H·∫°t C√† Ph√™",
    page_icon="‚òï",
    layout="wide"
)

# Thi·∫øt l·∫≠p style v·ªõi m√†u n·ªÅn kh√°c nhau cho t·ª´ng lo·∫°i
st.markdown("""
    <style>
    .main { padding: 2rem; }
    .stButton>button { 
        width: 100%; 
        margin-top: 1rem; 
    }
    .metric-card-ripe {
        background-color: #FF6B6B;  /* M√†u ƒë·ªè nh·∫°t cho h·∫°t ch√≠n */
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-card-unripe {
        background-color: #98FB98;  /* M√†u xanh l√° nh·∫°t cho h·∫°t ch∆∞a ch√≠n */
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-card-semi {
        background-color: #FFA07A;  /* M√†u cam nh·∫°t cho h·∫°t s·∫Øp ch√≠n */
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-card-total {
        background-color: #B0C4DE;  /* M√†u xanh d∆∞∆°ng nh·∫°t cho t·ªïng s·ªë */
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    </style>
    """, unsafe_allow_html=True)

# Ti√™u ƒë·ªÅ
st.title("üîç ·ª®ng d·ª•ng ƒê·∫øm H·∫°t C√† Ph√™")

# Th√¥ng tin GPU
if torch.cuda.is_available():
    device_info = f"üñ•Ô∏è ƒêang s·ª≠ d·ª•ng: CUDA - {torch.cuda.get_device_name(0)}"
else:
    device_info = "üñ•Ô∏è ƒêang s·ª≠ d·ª•ng: CPU (CUDA kh√¥ng kh·∫£ d·ª•ng)"
st.info(device_info)

# Kh·ªüi t·∫°o detector
@st.cache_resource
def load_model():
    try:
        # Ki·ªÉm tra best.pt trong th∆∞ m·ª•c models
        model_path = "models/best.pt"
        if not os.path.exists(model_path):
            # N·∫øu kh√¥ng t√¨m th·∫•y, ki·ªÉm tra trong th∆∞ m·ª•c runs
            model_path = "runs/train/coffee_detection/weights/best.pt"
            if not os.path.exists(model_path):
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y model t√πy ch·ªânh, s·ª≠ d·ª•ng model m·∫∑c ƒë·ªãnh")
                model_path = "yolov8n.pt"
            else:
                st.success(f"ƒê√£ t√¨m th·∫•y model t·∫°i: {model_path}")
                print(f"Loading model from: {model_path}")  # Debug log
        else:
            st.success(f"ƒê√£ t√¨m th·∫•y model t·∫°i: {model_path}")
            print(f"Loading model from: {model_path}")  # Debug log
        
        # Ki·ªÉm tra file t·ªìn t·∫°i v√† k√≠ch th∆∞·ªõc
        if os.path.exists(model_path):
            file_size = os.path.getsize(model_path) / (1024 * 1024)  # Convert to MB
            print(f"Model file size: {file_size:.2f} MB")  # Debug log
        
        return CoffeeDetector(model_path)
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i model: {str(e)}")
        print(f"Error details: {str(e)}")  # Debug log
        return None

detector = load_model()
if detector is None:
    st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o model. Vui l√≤ng ki·ªÉm tra l·∫°i c√†i ƒë·∫∑t.")
    st.stop()

# T·∫°o 2 c·ªôt
col1, col2 = st.columns(2)

# Upload ·∫£nh
with col1:
    st.subheader("üì§ T·∫£i l√™n ·∫£nh")
    uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh h·∫°t c√† ph√™", type=['jpg', 'jpeg', 'png'])
    
    if uploaded_file is not None:
        st.image(uploaded_file, caption="·∫¢nh g·ªëc", use_container_width=True)
        
        if st.button("üîç ƒê·∫øm h·∫°t c√† ph√™"):
            with st.spinner("‚è≥ ƒêang x·ª≠ l√Ω..."):
                try:
                    # Th·ª±c hi·ªán detection
                    counts, annotated_image = detector.process_image(uploaded_file)
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong c·ªôt 2
                    with col2:
                        st.subheader("üìä K·∫øt qu·∫£ ph√¢n t√≠ch")
                        
                        # Hi·ªÉn th·ªã s·ªë li·ªáu
                        col_stats1, col_stats2 = st.columns(2)
                        
                        with col_stats1:
                            st.markdown("""
                            <div class="metric-card-unripe">
                                <h3>üü¢ H·∫°t ch∆∞a ch√≠n (Xanh)</h3>
                                <h2>{} h·∫°t</h2>
                            </div>
                            """.format(counts['cam']), unsafe_allow_html=True)
                            
                            st.markdown("""
                            <div class="metric-card-semi">
                                <h3>üü† H·∫°t s·∫Øp ch√≠n (Cam)</h3>
                                <h2>{} h·∫°t</h2>
                            </div>
                            """.format(counts['do']), unsafe_allow_html=True)
                        
                        with col_stats2:
                            st.markdown("""
                            <div class="metric-card-ripe">
                                <h3>üî¥ H·∫°t ch√≠n (ƒê·ªè)</h3>
                                <h2>{} h·∫°t</h2>
                            </div>
                            """.format(counts['xanh']), unsafe_allow_html=True)
                            
                            st.markdown("""
                            <div class="metric-card-total">
                                <h3>üìä T·ªïng s·ªë h·∫°t</h3>
                                <h2>{} h·∫°t</h2>
                            </div>
                            """.format(counts['total']), unsafe_allow_html=True)
                        
                        # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£
                        st.image(annotated_image, caption="K·∫øt qu·∫£ ph√°t hi·ªán", use_container_width=True)
                        
                except Exception as e:
                    st.error(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")

# Th√¥ng tin b√™n sidebar
st.sidebar.header("‚ÑπÔ∏è Th√¥ng tin")
st.sidebar.markdown("""
    ### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
    1. T·∫£i l√™n ·∫£nh ch·ª©a h·∫°t c√† ph√™
    2. Nh·∫•n n√∫t "ƒê·∫øm h·∫°t c√† ph√™"
    3. Xem k·∫øt qu·∫£ ph√¢n t√≠ch
    
    ### Ch√∫ th√≠ch m√†u s·∫Øc:
    üü¢ Xanh - H·∫°t ch∆∞a ch√≠n
    üü† Cam - H·∫°t s·∫Øp ch√≠n
    üî¥ ƒê·ªè - H·∫°t ch√≠n
    
    ### V·ªÅ ·ª©ng d·ª•ng:
    - S·ª≠ d·ª•ng YOLOv8 ƒë·ªÉ ph√°t hi·ªán
    - Ph√¢n lo·∫°i h·∫°t theo ƒë·ªô ch√≠n
    - X·ª≠ l√Ω tr√™n GPU (n·∫øu c√≥)
""")
